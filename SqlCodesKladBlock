
CREATE PROCEDURE newSelect()
SELECT bestemming.Plaats, bestemming.Land, bestemming.Werelddeel FROM klant
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode


CREATE PROCEDURE newSelect()
SELECT bestemming.Plaats, bestemming.Land, bestemming.Werelddeel FROM reis
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode


CREATE PROCEDURE Land()
SELECT bestemming.Land, bestemming.Werelddeel FROM bestemming  ORDER BY `Land` DESC
LIMIT    N;
INNER JOIN bestemming bestemming.Bestemmingcode

CREATE PROCEDURE MostVisited()

SELECT bestemming.Land, bestemming.Werelddeel FROM bestemming group by `Land` order by `Land` desc

SELECT Bestemmingcode FROM reis group by `Bestemmingcode` order by `Bestemmingcode` desc

select Value,COUNT(Value) AS ValueFrequency

SELECT Bestemmingcode,Reisnr,Prijs_per_persoon FROM reis group by Bestemmingcode order by COUNT(Bestemmingcode) DESC
INNER JOIN bestemming ON Bestemmingcode = bestemming.Bestemmingcode

SELECT Bestemmingcode,Reisnr,Prijs_per_persoon FROM reis
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode


SELECT Naam, Woonplaats, bestemming.Plaats, bestemming.Land,
bestemming.Werelddeel FROM klant
INNER JOIN boeking ON klant.Klantnr = boeking.Klantnr
INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode


SELECT Reisnr FROM boeking group by Reisnr order by COUNT(Reisnr) DESC

SELECT bestemming.Plaats, bestemming.Land FROM boeking group by bestemming.Land order by COUNT(bestemming.Land) DESC
INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode


SELECT bestemming.Plaats, bestemming.Land, status FROM boeking
INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode


CREATE PROCEDURE betaalde()
SELECT bestemming.Plaats, bestemming.Land, status FROM boeking
INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode ORDER BY `boeking`.`status` ASC


DELIMITER $$
CREATE TRIGGER `telVolwassenenDelete`
AFTER DELETE ON `boeking`
FOR EACH ROW
BEGIN
 SET @aantalVolwassenen = (SELECT SUM(Aantal_volwassenen) FROM boeking);
 SET @aantalRijen = (SELECT COUNT(IFNULL(Aantal_volwassenen, 1)) FROM klant_statistieken);
 SET @datum = (SELECT CURDATE());
IF @aantalRijen = 0 THEN
 INSERT INTO klant_statistieken (Aantal_volwassenen) VALUES (@aantalVolwassenen);
 ELSEIF @aantalRijen = 1 THEN
 UPDATE klant_statistieken
SET Aantal_volwassenen = @aantalVolwassenen, Laatste_update = @datum WHERE 1;
 END IF;
END$$
DELIMITER ;


DELIMITER $$
CREATE TRIGGER `telBetaaldUpdate`
AFTER UPDATE ON `boeking`
FOR EACH ROW
BEGIN
   SET @aantalBetaald = (SELECT SUM(status) FROM boeking WHERE status = 'Betaald');
   SET @aantalRijen = (SELECT COUNT(IFNULL(Aantal_volwassenen, 1)) FROM klant_statistieken);
   SET @datum = (SELECT CURDATE());
   IF @aantalRijen = 0 THEN
      INSERT INTO klant_statistieken (Aantal_klanten_betaald) VALUES (@aantalBetaald);
   ELSEIF @aantalRijen = 1 THEN
      UPDATE klant_statistieken
      SET Aantal_klanten_betaald = @aantalBetaald, Laatste_update = @datum WHERE 1;
   END IF;
END$$
DELIMITER ;


SELECT COUNT(status)
FROM boeking;
SELECT SUM(status) FROM boeking WHERE status = "Betaald"
SELECT COUNT(status)
FROM boeking
WHERE status = "Betaald"


DELIMITER $$
CREATE TRIGGER ` telKinderenUpdate`
AFTER INSERT ON `boeking`
FOR EACH ROW
BEGIN
 SET @aantalKinderen = (SELECT SUM(Aantal_kinderen) FROM boeking);
 SET @aantalRijen = (SELECT COUNT(IFNULL(Aantal_volwassenen, 1)) FROM klant_statistieken);
 SET @datum = (SELECT CURDATE());
IF @aantalRijen = 0 THEN
 INSERT INTO klant_statistieken (Aantal_kinderen) VALUES (@aantalKinderen);
 ELSEIF @aantalRijen = 1 THEN
 UPDATE klant_statistieken
SET Aantal_kinderen = @aantalKinderen, Laatste_update = @datum WHERE 1;
 END IF;
END$$
DELIMITER ;

DELETE FROM `boeking` WHERE status = 'Betaald';

DELIMITER $$
CREATE TRIGGER ` telBetaaldUpdate`
AFTER UPDATE ON `boeking`
FOR EACH ROW
BEGIN
 SET @aantalBetaald = (SELECT SUM(status) where FROM boeking WHERE status = 'Betaald');
 SET @aantalRijen = (SELECT COUNT(IFNULL(Aantal_volwassenen, 1)) FROM klant_statistieken);
 SET @datum = (SELECT CURDATE());
IF @aantalRijen = 0 THEN
 INSERT INTO klant_statistieken (Aantal_klanten_betaald) VALUES (@aantalBetaald);
 ELSEIF @aantalRijen = 1 THEN
 UPDATE klant_statistieken
SET Aantal_klanten_betaald = @aantalBetaald, Laatste_update = @datum WHERE 1;
 END IF;
END$$
DELIMITER ;


DELIMITER $$
CREATE TRIGGER ` telNietBetaaldUpdate`
AFTER DELETE ON `boeking`
FOR EACH ROW
BEGIN
 SET @aantalNietBetaald = (SELECT SUM(status) where FROM boeking WHERE status = 'Niet betaald!');
 SET @aantalRijen = (SELECT COUNT(IFNULL(Aantal_volwassenen, 1)) FROM klant_statistieken);
 SET @datum = (SELECT CURDATE());
IF @aantalRijen = 0 THEN
 INSERT INTO klant_statistieken (Aantal_klanten_niet_betaald) VALUES (@aantalNietBetaald);
 ELSEIF @aantalRijen = 1 THEN
 UPDATE klant_statistieken
SET Aantal_klanten_niet_betaald = @aantalNietBetaald, Laatste_update = @datum WHERE 1;
 END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE FUNCTION berekenBelasting(bedrag int(7), belasting int(7))
RETURNS int(7) DETERMINISTIC
BEGIN
SET @nieuwBedrag = bedrag * (1 - belasting / 100);
RETURN @nieuwBedrag;
END $$
DELIMITER ;


DELIMITER $$
CREATE FUNCTION newPrice(bedrag int(7), belasting int(7))
RETURNS int(7) DETERMINISTIC
BEGIN
SET @nieuwBedrag = bedrag * (1 + belasting / 100);
RETURN @nieuwBedrag;
END $$
DELIMITER ;


CREATE VIEW testFunctionView AS
SELECT newPrice(500,21)

CREATE VIEW landReizen AS
SELECT  bestemming.Plaats,  bestemming.Land,Aantal_volwassenen,Aantal_kids,Betaald_bedrag FROM boeking
INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode


CREATE PROCEDURE betaalde()
SELECT bestemming.Plaats, bestemming.Land, status FROM boeking
INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode
WHERE status = 'Betaald'

CREATE PROCEDURE heeftKinderen()
  SELECT  bestemming.Plaats,  bestemming.Land,Aantal_volwassenen,Aantal_kids,Betaald_bedrag FROM boeking WHERE Aantal_kids > 0
  INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
  INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode

START TRANSACTION;
SELECT * FROM boeking;
CALL heeftKinderen()
ROLLBACK;

START TRANSACTION;

CREATE PROCEDURE newSelect()
SELECT bestemming.Plaats, bestemming.Land, bestemming.Werelddeel FROM reis
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode



START TRANSACTION;
UPDATE `boeking` SET `Bedrag` =  Betaald_bedrag WHERE
`Betaald_bedrag` > 0;
SELECT * FROM boeking;
ROLLBACK;

DELIMITER $$
CREATE FUNCTION setBedrag()
RETURNS decimal(7,2) DETERMINISTIC
BEGIN
SET @Betaald  SELECT Betaald_bedrag FROM boeking;
IF @Betaald > 0 THEN
  SET @newValue = @Betaald;
ELSE
  SET @newValue = 0;
END IF;
RETURN @newValue;
END $$
DELIMITER ;



///function die checkt als er betaald is voor opdracht B
DELIMITER $$
CREATE FUNCTION isBetaald(bedrag int(7))
RETURNS varchar(50) DETERMINISTIC
BEGIN
IF bedrag > 0 THEN
  SET @Betaald = "Betaald";
ELSE
  SET @Betaald = "Niet betaald!";
END IF;
RETURN @Betaald;
END $$
DELIMITER ;

/////belasting functie die de nieuwe prijs weergeeft als die in is gevult voor de boeking table
DELIMITER $$
CREATE FUNCTION newPrice(bedrag int(7), belasting int(7))
RETURNS int(7) DETERMINISTIC
BEGIN
SET @nieuwBedrag = bedrag * (1 + belasting / 100);
RETURN @nieuwBedrag;
END $$
DELIMITER ;

CREATE PROCEDURE setBooking()
  SELECT  bestemming.Plaats, bestemming.Land,Aantal_volwassenen,Aantal_kids,Betaald_bedrag FROM boeking
  SET @Betaald = SELECT isBetaald(200) FROM boeking
  SET status = @Betaald WHERE 1;
  INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
  INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode


CREATE PROCEDURE setBooking()
  SELECT  bestemming.Plaats, bestemming.Land,Aantal_volwassenen,Aantal_kids,Betaald_bedrag,Belasting FROM boeking
  IF(!Belasting)
  BEGIN
    UPDATE boeking
    SET Belasting = true,  WHERE 1;
  END
  ELSE
  BEGIN

  END
  UPDATE boeking
  SET status = @Betaald WHERE 1;
  INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
  INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode



Create Proc SP1
(
   @ID int,
   @value int(7)
 )

  AS
  BEGIN

  Exec berekenBelasting @value,21 OUTPUT

END


CREATE PROCEDURE testOpdracht()


START TRANSACTION

   INSERT INTO boeking(Klantnr,Reisnr,Boekdatum,Aantal_volwassenen,Aantal_kids,Betaald_bedrag,status)
   VALUES  (15,7,CURDATE(),1,2,500,'Niet betaald!')
   SAVE TRANSACTION FirstInsert

   UPDATE `boeking` SET `status`="Betaald" WHERE
   `Betaald_bedrag` > 0;
   SELECT * FROM boeking;
   SAVE TRANSACTION SecondInsert

   INSERT INTO boeking(Klantnr,Reisnr,Boekdatum,Aantal_volwassenen,Aantal_kids,Betaald_bedrag,status)
   VALUES  (15,10,CURDATE(),10,2,5000,'Niet betaald!')

   ROLLBACK TRANSACTION SecondInsert

COMMIT

//////////////opdracht A
START TRANSACTION;
INSERT INTO `boeking`(`Klantnr`, `Reisnr`, `Boekdatum`,
`Aantal_volwassenen`, `Aantal_kids`, `Betaald_bedrag`, `status`) VALUES (7,15,CURDATE(),2,2,500.00, "");

SAVE TRANSACTION FirstInsert

UPDATE boeking SET
status = CASE
 WHEN Betaald_bedrag > 0 THEN "Betaald"
 WHEN Betaald_bedrag <= 0 THEN "Niet betaald!"
 ELSE "NIET BETAALD!"
END
WHERE 1;

SAVE TRANSACTION SecondInsert

CALL boekingen();

COMMIT



START TRANSACTION;
UPDATE `boeking` SET `status`=”Betaald” WHERE
`Betaald_bedrag` > 0;
SELECT * FROM boeking;
ROLLBACK;

CREATE PROCEDURE boekingen()
SELECT bestemming.Plaats, bestemming.Land,klant.Naam,Aantal_volwassenen,Aantal_kids,Betaald_bedrag,status FROM boeking
INNER JOIN klant ON boeking.Klantnr = klant.Klantnr
INNER JOIN reis ON boeking.Reisnr = reis.Reisnr
INNER JOIN bestemming ON reis.Bestemmingcode = bestemming.Bestemmingcode




START TRANSACTION;

  INSERT INTO `boeking`(`Klantnr`, `Reisnr`, `Boekdatum`,`Aantal_volwassenen`, `Aantal_kids`, `Betaald_bedrag`, `status`)
  VALUES (7,15,CURDATE(),2,2,500.00, "");


  SAVE TRANSACTION FirstInsert;

  CALL boekingen();

  INSERT INTO `boeking`(`Klantnr`, `Reisnr`, `Boekdatum`,`Aantal_volwassenen`, `Aantal_kids`, `Betaald_bedrag`, `status`)
   VALUES (7,20,CURDATE(),2,5,800.00, "");

  SAVE TRANSACTION SecondInsert;

  ROLLBACK TRANSACTION @FirstInsert

  COMMIT
  CALL boekingen();



  UPDATE `boeking` SET `status`= "Betaald" WHERE
  `Betaald_bedrag` > 0;
  SELECT * FROM boeking;


  START TRANSACTION;

    INSERT INTO `boeking`(`Klantnr`, `Reisnr`, `Boekdatum`,`Aantal_volwassenen`, `Aantal_kids`, `Betaald_bedrag`, `status`)
    VALUES (7,15,CURDATE(),2,2,500.00, "");


    SAVE TRANSACTION FirstInsert;

    CALL boekingen();

    UPDATE `boeking` SET `status`= "Betaald" WHERE `Betaald_bedrag` > 0;

    SAVE TRANSACTION SecondInsert;

    ROLLBACK TRANSACTION @FirstInsert

    COMMIT
    CALL boekingen();





    Opdracht A

USE reis
GO

TRUNCATE TABLE boeking

BEGIN TRANSACTION

   INSERT INTO `boeking`(`Klantnr`, `Reisnr`, `Boekdatum`,`Aantal_volwassenen`, `Aantal_kids`, `Betaald_bedrag`, `status`)
   VALUES (7,15,CURDATE(),2,2,500.00, "")

   SAVE TRANSACTION @FirstInsert

  	UPDATE boeking SET status = CASE
     WHEN Betaald_bedrag > 0 THEN "Betaald"
     WHEN Betaald_bedrag <= 0 THEN "Niet betaald!"
     ELSE "NIET BETAALD!"
    END
    WHERE 1

   SAVE TRANSACTION @SecondInsert

  	CALL boekingen()

    INSERT INTO `boeking`(`Klantnr`, `Reisnr`, `Boekdatum`,`Aantal_volwassenen`, `Aantal_kids`, `Betaald_bedrag`, `status`)
    VALUES (7,15,CURDATE(),2,2,500.00, "")

    SAVE TRANSACTION @ThirdInsert

   ROLLBACK TRANSACTION @vSecondInsert

COMMIT

CALL boekingen()


DELIMITER $$
CREATE FUNCTION amountPlaces()
RETURNS int(7) DETERMINISTIC
BEGIN
SET @nieuwBedrag = bedrag * (1 + belasting / 100);
RETURN @nieuwBedrag;
END $$
DELIMITER ;


DELIMITER $$
CREATE FUNCTION amountPlaces()
RETURNS int(7) DETERMINISTIC
BEGIN
SET @amount = SELECT Count(*) FROM `reis` WHERE 1
RETURN @amount;
END $$
DELIMITER ;
